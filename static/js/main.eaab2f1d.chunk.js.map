{"version":3,"sources":["images/bij.png","images/tent.png","images/tree.png","images/windmill.png","utils/leaflet-helpers.js","utils/wfs-helper.js","viewer/viewer.js","open-layers/open-layers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getCrs","mapRef","current","leafletElement","options","crs","createWfs","name","url","resource","typename","minZoom","maxZoom","features","retrieveWFSFeatures","_x7","_retrieveWFSFeatures","apply","this","arguments","_callee2","componentContext","regenerator_default","a","wrap","_context2","prev","next","abrupt","Object","entries","state","wfsServices","filter","_ref7","_ref8","slicedToArray","key","selectedWfsService","map","_ref9","_ref10","value","retrieveFeatures","stop","_x8","_x9","_x10","_x11","_retrieveFeatures","_callee3","bounds","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_loop","_iterator","_step","_value","_context3","getBounds","setState","produce","draft","stateFeatures","filteredFeatures","feature","find","stateFeature","id","_draft$wfsServices$ty","push","toConsumableArray","asyncIterator","getPlotsGeoJSONData2","sent","done","t0","return","finish","_callee","southWest","northEast","bbox","wfsUrl","getPlots","response","json","totalFeatures","nextResponse","nextJson","_context","project","getSouthWest","getNorthEast","concat","x","y","startIndex","fetch","awaitAsyncGenerator","console","log","length","onPointToLayer","latlng","circleMarker","radius","fillColor","color","weight","opacity","fillOpacity","wfsServiceDropdown","react_default","createElement","onChange","e","target","zoom","forceUpdate","selectWfsService","_ref5","_ref6","BaseLayer","LayersControl","Overlay","Viewer","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createRef","handleFeatureClick","selectedLayer","setStyle","layer","bringToFront","properties","dragged","lat","lon","_len","wfss","Array","_key","forEach","wfs","registerWFS","undefined","position","className","Map","center","onZoomEnd","curr","getZoom","onDragEnd","handleDragEnd","onClick","handleClick","onLocationfound","handleLocationFound","ref","TileLayer","attribution","checked","LayerGroup","WMSTileLayer","layers","tiled","transparent","format","serverType","version","onFeatureClick","_ref","_ref2","_ref3","_ref4","FeatureGroup","geoJSONData","GeoJSON","data","style","pointToLayer","createFeatureLayers","PureComponent","OpenLayers","_PureComponent","onRadioChange","radio","currentTarget","inherits","createClass","source","OSM","view","View","prevProps","prevState","currentLayer","removeLayer","vectorSource","VectorSource","readFeatures","Bestemmingsplan","VectorLayer","Style","fill","Fill","stroke","Stroke","width","addLayer","vectorSource2","Natuur","type","htmlFor","src","windmill","alt","tree","bij","tent","App","Switch","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ws4gbAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kaCIjC,SAASC,EAAOC,GACrB,OAAOA,EAAOC,QAAQC,eAAeC,QAAQC,kCCUxC,SAASC,EAAUC,EAAMC,EAAKC,EAAUC,EAAUC,EAASC,GAChE,MAAO,CAAEL,OAAMC,MAAKC,WAAUC,WAAUC,UAASC,UAASC,SAAU,IAa/D,SAAeC,EAAtBC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAAC,EAAmCC,GAAnC,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACEC,OAAOC,QAAQT,EAAiBU,MAAMC,aAC1CC,OAAO,SAAAC,GAAA,IAAAC,EAAAN,OAAAO,EAAA,EAAAP,CAAAK,EAAA,GAAEG,EAAFF,EAAA,GAAAA,EAAA,UAAkBE,IAAQhB,EAAiBU,MAAMO,qBACxDC,IAAI,SAAAC,GAAkB,IAAAC,EAAAZ,OAAAO,EAAA,EAAAP,CAAAW,EAAA,GAAXE,GAAWD,EAAA,GAAAA,EAAA,IACrB,OAAOE,EACLtB,EACAqB,EAAMlC,IACNkC,EAAMjC,SACNiC,EAAMhC,aARP,wBAAAe,EAAAmB,SAAAxB,EAAAF,gCAaA,SAAeyB,EAAtBE,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,EAAAhC,MAAAC,KAAAC,sDAAO,SAAA+B,EACL7B,EACAb,EACAC,EACAC,GAJK,IAAAyC,EAAA9C,EAAA+C,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAApC,EAAAC,EAAAC,KAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OD1CmB1B,ECgDCoB,EAAiBpB,OAApCkD,ED/CClD,EAAOC,QAAQC,eAAeyD,YCgD/BvD,EAAML,EAAOqB,EAAiBpB,QAEpCoB,EAAiBwC,SACfC,YAAQzC,EAAiBU,MAAO,SAAAgC,GAC9BA,EAAM/B,YAAYtB,GAAUG,SAAW,MAXtCuC,GAAA,EAAAC,GAAA,EAAAM,EAAAjC,KAAA,EAAA6B,EAAA,eAcY1C,EAdZ6C,EAsBGM,EAAgB3C,EAAiBU,MAAMC,YAAYtB,GAAUG,SAC7DoD,EAAmBpD,EAASoB,OAChC,SAAAiC,GAAO,OACJF,EAAcG,KAAK,SAAAC,GAAY,OAAIF,EAAQG,KAAOD,EAAaC,OAEpEhD,EAAiBwC,SACfC,YAAQzC,EAAiBU,MAAO,SAAAgC,GAAS,IAAAO,GACvCA,EAAAP,EAAM/B,YAAYtB,GAAUG,UAAS0D,KAArCtD,MAAAqD,EAAAzC,OAAA2C,EAAA,EAAA3C,CAA6CoC,QA7B9CT,EAAA3B,OAAA4C,EAAA,EAAA5C,CAcwB6C,EAC3BrD,EACA8B,EACA9C,EACAG,EACAC,EACAC,IApBG,cAAAiD,EAAAhC,KAAA,GAAA6B,EAAA7B,OAAA,eAAA8B,EAAAE,EAAAgB,KAAAvB,EAAAK,EAAAmB,KAAAjB,EAAAhC,KAAA,GAAA8B,EAAAf,MAAA,WAAAgB,EAAAC,EAAAgB,KAAAvB,EAAA,CAAAO,EAAAhC,KAAA,SAAA4B,IAAA,QAAAH,GAAA,EAAAO,EAAAhC,KAAA,gBAAAgC,EAAAhC,KAAA,iBAAAgC,EAAAjC,KAAA,GAAAiC,EAAAkB,GAAAlB,EAAA,SAAAN,GAAA,EAAAC,EAAAK,EAAAkB,GAAA,WAAAlB,EAAAjC,KAAA,GAAAiC,EAAAjC,KAAA,GAAA0B,GAAA,MAAAI,EAAAsB,OAAA,CAAAnB,EAAAhC,KAAA,gBAAAgC,EAAAhC,KAAA,GAAA6B,EAAAsB,SAAA,WAAAnB,EAAAjC,KAAA,IAAA2B,EAAA,CAAAM,EAAAhC,KAAA,eAAA2B,EAAA,eAAAK,EAAAoB,OAAA,mBAAApB,EAAAoB,OAAA,6BAAApB,EAAAf,OD1CA,IAAmB3C,GC0CnBiD,EAAAhC,KAAA,+DAmCSwD,yFAAhB,SAAAM,EACE3D,EACA8B,EACA9C,EACAG,EACAC,EACAC,GANF,IAAAuE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAApE,EAAAC,EAAAC,KAAA,SAAAmE,GAAA,cAAAA,EAAAjE,KAAAiE,EAAAhE,MAAA,cAQQsD,EAAY5E,EAAIuF,QAAQzC,EAAO0C,gBAC/BX,EAAY7E,EAAIuF,QAAQzC,EAAO2C,gBAE/BX,EAXR,GAAAY,OAWkBd,EAAUe,EAX5B,KAAAD,OAWiCd,EAAUgB,EAX3C,KAAAF,OAWgDb,EAAUc,EAX1D,KAAAD,OAW+Db,EAAUe,GAEjEb,EAbR,GAAAW,OAaoBvF,EAbpB,KAAAuF,OAa2BtF,EAb3B,QAcQ4E,EAAW,SAAAa,GAAU,OACzBC,MAAK,GAAAJ,OACAX,EADA,4DAAAW,OACiErF,EADjE,kCAAAqF,OAC0GG,EAD1G,uDAAAH,OAC0KZ,EAD1K,iCAfTQ,EAAAhE,KAAA,EAAAE,OAAAuE,EAAA,EAAAvE,CAkByBwD,EAAS,IAlBlC,cAkBQC,EAlBRK,EAAAhB,KAAAgB,EAAAhE,KAAA,GAAAE,OAAAuE,EAAA,EAAAvE,CAmBqByD,EAASC,QAnB9B,QAoBE,OADMA,EAnBRI,EAAAhB,KAAAgB,EAAAhE,KAAA,GAoBQ4D,EAAK1E,SApBb,QAqBQ2E,EAAgBD,EAAKC,cAC3Ba,QAAQC,IAAId,GAtBd,aAwBInE,EAAiBU,MAAMC,YAAYtB,GAAUG,SAAS0F,OAASf,GAxBnE,CAAAG,EAAAhE,KAAA,gBAAAgE,EAAAhE,KAAA,GAAAE,OAAAuE,EAAA,EAAAvE,CA0B+BwD,EACzBhE,EAAiBU,MAAMC,YAAYtB,GAAUG,SAAS0F,SA3B5D,eA0BUd,EA1BVE,EAAAhB,KAAAgB,EAAAhE,KAAA,GAAAE,OAAAuE,EAAA,EAAAvE,CA6B2B4D,EAAaF,QA7BxC,QA8BI,OADMG,EA7BVC,EAAAhB,KAAAgB,EAAAhE,KAAA,GA8BU+D,EAAS7E,SA9BnB,QAAA8E,EAAAhE,KAAA,kCAAAgE,EAAA/C,SAAAoC,EAAA9D,gCA4GO,SAASsF,EAAetC,EAASuC,GAEtC,OAAOC,uBAAaD,EAAQ,CAC1BE,OAAQ,EACRC,UAAW,UACXC,MAAO,OACPC,OAAQ,EACRC,QAAS,EACTC,YAAa,KA2CV,SAASC,EAAmB5F,GACjC,OACE6F,EAAA3F,EAAA4F,cAAA,UACEC,SAzBC,SAA0B/F,GAC/B,OAAO,SAAAgG,GACL,IAAM1G,EAAUU,EAAiBU,MAAMC,YAAYqF,EAAEC,OAAO5E,OAAO/B,QACnDU,EAAiBU,MAAMC,YAAYqF,EAAEC,OAAO5E,OAAO9B,QACnES,EAAiBwC,SACfC,YAAQzC,EAAiBU,MAAO,SAAAgC,GAC9BA,EAAM/B,YACJX,EAAiBU,MAAMO,oBACvBzB,SAAW,GACbkD,EAAMzB,mBAAqB+E,EAAEC,OAAO5E,SAIpCrB,EAAiBU,MAAMwF,MAAQ5G,GAEjCU,EAAiBmG,YAAY,WAC3B1G,EAAoBO,MASZoG,CAAiBpG,GAC3BqB,MAAOrB,EAAiBU,MAAMO,oBAE7BT,OAAOC,QAAQT,EAAiBU,MAAMC,aAAaO,IAClD,SAAAmF,GAAA,IAAAC,EAAA9F,OAAAO,EAAA,EAAAP,CAAA6F,EAAA,GAAErF,EAAFsF,EAAA,GAAOjF,EAAPiF,EAAA,UACET,EAAA3F,EAAA4F,cAAA,UAAQ9E,IAAKA,EAAKK,MAAOL,GACtBK,EAAMnC,aC/NXqH,EAAuBC,IAAvBD,UAAWE,EAAYD,IAAZC,QA4OJC,cArOb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAApG,OAAAqG,EAAA,EAAArG,CAAAX,KAAA6G,IACjBE,EAAApG,OAAAsG,EAAA,EAAAtG,CAAAX,KAAAW,OAAAuG,EAAA,EAAAvG,CAAAkG,GAAAM,KAAAnH,KAAM8G,KALR/H,OAASqI,sBAIUL,EAoGnBM,mBAAqB,SAAAlB,GACfY,EAAKO,eACPP,EAAKO,cAAcC,SAAS,CAC1B5B,MAAO,SAGXoB,EAAKO,cAAgBnB,EAAEqB,MACvBT,EAAKO,cAAcC,SAAS,CAC1B5B,MAAO,QAGToB,EAAKO,cAAcG,eACnBtC,QAAQC,IAAIe,EAAEqB,MAAMxE,QAAQ0E,aA7G5BX,EAAKlG,MAAQ+B,YDzBR,CACLyD,KAAM,GACNvF,YAAa,GACbM,mBAAoB,GACpBuG,SAAS,GCqB4B,SAAA9E,GACnCA,EAAM+E,IAAM,YACZ/E,EAAMgF,IAAM,aALGd,oFDVd,SAAqB5G,GAA2B,QAAA2H,EAAA7H,UAAAoF,OAAN0C,EAAM,IAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAANF,EAAME,EAAA,GAAAhI,UAAAgI,GACrD9H,EAAiBwC,SACfC,YAAQzC,EAAiBU,MAAO,SAAAgC,GAC9BA,EAAMzB,mBAAqB2G,EAAK,GAAGvI,SACnCuI,EAAKG,QAAQ,SAAAC,GAAG,OAAKtF,EAAM/B,YAAYqH,EAAI3I,UAAY2I,OAG3DhD,QAAQC,IAAIjF,EAAiBU,OCa3BuH,CACEpI,KACAZ,EACE,oBACA,0CACA,mBACA,oCACA,QACAiJ,GAEFjJ,EACE,6BACA,0CACA,oBACA,4BACA,QACAiJ,GAEFjJ,EACE,mCACA,0CACA,MACA,UACA,QACAiJ,GAEFjJ,EACE,MACA,2CACA,MACA,WACA,QACAiJ,GAEFjJ,EACE,WACA,2CACA,kBACA,kCACA,QACAiJ,GASFjJ,EACE,sBACA,2CACA,kBACA,kCACA,QACAiJ,GAQFjJ,EACE,aACA,0CACA,sBACA,iCACA,OACAiJ,GAEFjJ,EACE,aACA,0CACA,sBACA,iCACA,OACAiJ,GAEFjJ,EACE,YACA,0CACA,sBACA,gCACA,OACAiJ,qCAqBJ,IDlC0BlI,ECkCpBmI,EAAW,CAACtI,KAAKa,MAAM+G,IAAK5H,KAAKa,MAAMgH,KAC7C,OACE7B,EAAA3F,EAAA4F,cAAA,OAAKsC,UAAU,OACbvC,EAAA3F,EAAA4F,cAAA,OAAKsC,UAAU,gBAAgBxC,EAAmB/F,OAClDgG,EAAA3F,EAAA4F,cAACuC,EAAA,EAAD,CACEC,OAAQH,EACRjC,KAAMrG,KAAKa,MAAMwF,KACjBqC,WDzCoBvI,ECyCKH,KDxC1B,SAAAmG,GACL,IAAM3F,EAAOL,EAAiBU,MAAMwF,KAC9BsC,EAAOxC,EAAEC,OAAOwC,UACtBzD,QAAQC,IAAIuD,GACZ,IAAMlJ,EACJU,EAAiBU,MAAMC,YACrBX,EAAiBU,MAAMO,oBACvB3B,QAEFU,EAAiBU,MAAMC,YACrBX,EAAiBU,MAAMO,oBACvB1B,QACJS,EAAiBwC,SACfC,YAAQzC,EAAiBU,MAAO,SAAAgC,GAC9BA,EAAMwD,KAAOsC,KAIbnI,EAAOf,GAAWkJ,GAAQlJ,GAC5BG,EAAoBO,GACpBA,EAAiBwC,SACfC,YAAQzC,EAAiBU,MAAO,SAAAgC,GAC9BA,EAAM8E,SAAU,MAGXnH,GAAQf,GAAWkJ,EAAOlJ,EACnCU,EAAiBwC,SACfC,YAAQzC,EAAiBU,MAAO,SAAAgC,GAC9BA,EAAM/B,YACJX,EAAiBU,MAAMO,oBACvBzB,SAAW,MAGRgJ,IAASlJ,EAAU,GAAKkJ,EAAOnI,GAExCZ,EAAoBO,GACpBA,EAAiBwC,SACfC,YAAQzC,EAAiBU,MAAO,SAAAgC,GAC9BA,EAAM8E,SAAU,MAIpBgB,GAAQlJ,GACRkJ,EAAOnI,GACPL,EAAiBU,MAAM8G,SAGvB/H,EAAoBO,KCNhB0I,UDWH,SAAuB1I,GAC5B,OAAO,WACL,IAAMV,EACJU,EAAiBU,MAAMC,YACrBX,EAAiBU,MAAMO,oBACvB3B,QAEFU,EAAiBU,MAAMC,YACrBX,EAAiBU,MAAMO,oBACvB1B,QACAS,EAAiBU,MAAMwF,MAAQ5G,IACjCG,EAAoBO,GACpBA,EAAiBwC,SACfC,YAAQzC,EAAiBU,MAAO,SAAAgC,GAC9BA,EAAM8E,SAAU,OCzBLmB,CAAc9I,MACzB+I,QAAS/I,KAAKgJ,YACdC,gBAAiBjJ,KAAKkJ,oBACtBC,IAAKnJ,KAAKjB,OACVwJ,UAAU,eAEVvC,EAAA3F,EAAA4F,cAACU,EAAA,EAAD,CAAe2B,SAAS,YACtBtC,EAAA3F,EAAA4F,cAACS,EAAD,CAAWrH,KAAK,iBACd2G,EAAA3F,EAAA4F,cAACmD,EAAA,EAAD,CACEC,YAAY,0EACZ/J,IAAI,wDASR0G,EAAA3F,EAAA4F,cAACS,EAAD,CAAW4C,SAAO,EAACjK,KAAK,aACtB2G,EAAA3F,EAAA4F,cAACsD,EAAA,EAAD,KACEvD,EAAA3F,EAAA4F,cAACuD,EAAA,EAAD,CACElK,IAAI,6DACJmK,OAAO,sBAQbzD,EAAA3F,EAAA4F,cAACS,EAAD,CAAWrH,KAAK,uBACd2G,EAAA3F,EAAA4F,cAACuD,EAAA,EAAD,CACElK,IAAI,mEACJmK,OAAO,uBAGXzD,EAAA3F,EAAA4F,cAACW,EAAD,CAASvH,KAAK,oBACZ2G,EAAA3F,EAAA4F,cAACuD,EAAA,EAAD,CACElK,IAAI,mDACJmK,OAAO,yCACPC,OAAO,EACPC,aAAa,EACbC,OAAO,YACPC,WAAW,YACXhE,QAAS,GACTiE,QAAQ,WAGZ9D,EAAA3F,EAAA4F,cAACW,EAAD,CAASvH,KAAK,2BACZ2G,EAAA3F,EAAA4F,cAACuD,EAAA,EAAD,CACElK,IAAI,gEACJmK,OAAO,oCACPE,aAAa,EACbC,OAAO,YACP/D,QAAS,MAGbG,EAAA3F,EAAA4F,cAACW,EAAD,CAASvH,KAAK,iGACZ2G,EAAA3F,EAAA4F,cAACuD,EAAA,EAAD,CACElK,IAAI,wCACJmK,OAAO,6BACPE,aAAa,EACbC,OAAO,YACP/D,QAAS,MAGbG,EAAA3F,EAAA4F,cAACW,EAAD,CAASvH,KAAK,oCACZ2G,EAAA3F,EAAA4F,cAACuD,EAAA,EAAD,CACElK,IAAI,mDACJmK,OAAO,MACPE,aAAa,EACbC,OAAO,YACP/D,QAAS,MAGbG,EAAA3F,EAAA4F,cAACW,EAAD,CAASvH,KAAK,qCACZ2G,EAAA3F,EAAA4F,cAACuD,EAAA,EAAD,CACElK,IAAI,mDACJmK,OAAO,eACPE,aAAa,EACbC,OAAO,YACP/D,QAAS,MAGbG,EAAA3F,EAAA4F,cAACW,EAAD,CAASvH,KAAK,wBACZ2G,EAAA3F,EAAA4F,cAACuD,EAAA,EAAD,CACElK,IAAI,sEACJmK,OAAO,UACPE,aAAa,EACbC,OAAO,YACP/D,QAAS,OD/ClB,SAA6B1F,EAAkB4J,GACpD,OAAOpJ,OAAOC,QAAQT,EAAiBU,MAAMC,aAC1CC,OAAO,SAAAiJ,GAAA,IAAAC,EAAAtJ,OAAAO,EAAA,EAAAP,CAAAqJ,EAAA,GAAE7I,EAAF8I,EAAA,UAAAA,EAAA,GAAkB9I,IAAQhB,EAAiBU,MAAMO,qBACxDC,IAAI,SAAA6I,GAAA,IAAAC,EAAAxJ,OAAAO,EAAA,EAAAP,CAAAuJ,EAAA,GAAE/I,EAAFgJ,EAAA,GAAO3I,EAAP2I,EAAA,UACHnE,EAAA3F,EAAA4F,cAACmE,EAAA,EAAD,CAAcjJ,IAAKA,EAAK4H,QAASgB,GAC9BvI,EAAM7B,SAAS0B,IAAI,SAAAgJ,GAAW,OAC7BrE,EAAA3F,EAAA4F,cAACqE,EAAA,EAAD,CACEC,KAAMF,EACNlJ,IAAKkJ,EAAYlH,GACjBqH,MAAO,CAAE7E,MAAO,QAChB8E,aAAcnF,SC4CfoF,CAAoB1K,KAAMA,KAAKqH,6BAnOrBsD,iOCHRC,GAAb,SAAAC,GAIE,SAAAD,EAAY9D,GAAO,IAAAC,EAAA,OAAApG,OAAAqG,EAAA,EAAArG,CAAAX,KAAA4K,IACjB7D,EAAApG,OAAAsG,EAAA,EAAAtG,CAAAX,KAAAW,OAAAuG,EAAA,EAAAvG,CAAAiK,GAAAzD,KAAAnH,KAAM8G,KA6ERgE,cAAgB,SAAA3E,GACdY,EAAKpE,SACHC,YAAQmE,EAAKlG,MAAO,SAAAgC,GAClBA,EAAMkI,MAAQ5E,EAAE6E,cAAcxJ,UA9ElCuF,EAAKlG,MAAQ+B,YAAQ,GAAI,SAAAC,GACvBA,EAAMkI,MAAQ,KAJChE,EAJrB,OAAApG,OAAAsK,EAAA,EAAAtK,CAAAiK,EAAAC,GAAAlK,OAAAuK,EAAA,EAAAvK,CAAAiK,EAAA,EAAAzJ,IAAA,oBAAAK,MAAA,WAaIxB,KAAKqB,IAAM,IAAImH,IAAI,CACjBpC,OAAQ,MACRqD,OAAQ,CACN,IAAIL,IAAU,CACZ+B,OAAQ,IAAIC,OAGhBC,KAAM,IAAIC,IAAK,CACb7C,OAAQ,CAAC,kBAAwB,mBACjCpC,KAAM,SAtBd,CAAAlF,IAAA,qBAAAK,MAAA,SA2BqB+J,EAAWC,GAC5B,GAAIA,EAAUT,QAAU/K,KAAKa,MAAMkK,MAAO,CAMxC,GALI/K,KAAKyL,eACPzL,KAAKqB,IAAIqK,YAAY1L,KAAKyL,cAC1BzL,KAAKyL,kBAAepD,GAGG,cAArBrI,KAAKa,MAAMkK,MAAuB,CACpC,IAAMY,EAAe,IAAIC,IAAa,CACpCjM,UAAU,IAAI2K,KAAUuB,aAAaC,KAEvC9L,KAAKyL,aAAe,IAAIM,IAAY,CAClCZ,OAAQQ,EACRnB,MAAO,IAAIwB,IAAM,CACfC,KAAM,IAAIC,IAAK,CACbvG,MAAO,yBAETwG,OAAQ,IAAIC,IAAO,CACjBzG,MAAO,uBACP0G,MAAO,QAKbrM,KAAKqB,IAAIiL,SAAStM,KAAKyL,cAGzB,GAAyB,eAArBzL,KAAKa,MAAMkK,MAAwB,CACrC,IAAMwB,EAAgB,IAAIX,IAAa,CACrCjM,UAAU,IAAI2K,KAAUuB,aAAaW,KAEvCxM,KAAKyL,aAAe,IAAIM,IAAY,CAClCZ,OAAQoB,EACR/B,MAAO,IAAIwB,IAAM,CACfC,KAAM,IAAIC,IAAK,CACbvG,MAAO,yBAETwG,OAAQ,IAAIC,IAAO,CACjBzG,MAAO,uBACP0G,MAAO,QAKbrM,KAAKqB,IAAIiL,SAAStM,KAAKyL,cAGrBzL,KAAKa,MAAMkK,MAGX/K,KAAKa,MAAMkK,SA7ErB,CAAA5J,IAAA,SAAAK,MAAA,WA2FI,OACEwE,EAAA3F,EAAA4F,cAAA,OAAKsC,UAAU,aACbvC,EAAA3F,EAAA4F,cAAA,OAAKsC,UAAU,QACbvC,EAAA3F,EAAA4F,cAAA,OAAKsC,UAAU,UACbvC,EAAA3F,EAAA4F,cAAA,oBACAD,EAAA3F,EAAA4F,cAAA,OAAKsC,UAAU,gBACbvC,EAAA3F,EAAA4F,cAAA,SACEwG,KAAK,QACLtJ,GAAG,YACH9D,KAAK,SACLmC,MAAM,YACN8H,QAA8B,cAArBtJ,KAAKa,MAAMkK,MACpB7E,SAAUlG,KAAK8K,gBAEjB9E,EAAA3F,EAAA4F,cAAA,SAAOyG,QAAQ,aAAf,YACY,IACV1G,EAAA3F,EAAA4F,cAAA,OAAK0G,IAAKC,KAAUC,IAAI,YAAYtE,UAAU,WAGlDvC,EAAA3F,EAAA4F,cAAA,OAAKsC,UAAU,gBACbvC,EAAA3F,EAAA4F,cAAA,SACEwG,KAAK,QACLtJ,GAAG,aACH9D,KAAK,SACLmC,MAAM,aACN8H,QAA8B,eAArBtJ,KAAKa,MAAMkK,MACpB7E,SAAUlG,KAAK8K,gBAEjB9E,EAAA3F,EAAA4F,cAAA,SAAOyG,QAAQ,cAAf,cACa1G,EAAA3F,EAAA4F,cAAA,OAAK0G,IAAKG,KAAMD,IAAI,SAAStE,UAAU,WAGtDvC,EAAA3F,EAAA4F,cAAA,OAAKsC,UAAU,gBACbvC,EAAA3F,EAAA4F,cAAA,SACEwG,KAAK,QACLtJ,GAAG,YACH9D,KAAK,SACLmC,MAAM,YACN8H,QAA8B,cAArBtJ,KAAKa,MAAMkK,MACpB7E,SAAUlG,KAAK8K,gBAEjB9E,EAAA3F,EAAA4F,cAAA,SAAOyG,QAAQ,aAAf,aACY1G,EAAA3F,EAAA4F,cAAA,OAAK0G,IAAKI,KAAKF,IAAI,YAAYtE,UAAU,WAGvDvC,EAAA3F,EAAA4F,cAAA,OAAKsC,UAAU,gBACbvC,EAAA3F,EAAA4F,cAAA,SACEwG,KAAK,QACLtJ,GAAG,UACH9D,KAAK,SACLmC,MAAM,UACN8H,QAA8B,YAArBtJ,KAAKa,MAAMkK,MACpB7E,SAAUlG,KAAK8K,gBAEjB9E,EAAA3F,EAAA4F,cAAA,SAAOyG,QAAQ,WAAf,WACU1G,EAAA3F,EAAA4F,cAAA,OAAK0G,IAAKK,KAAMH,IAAI,UAAUtE,UAAU,aAKxDvC,EAAA3F,EAAA4F,cAAA,OAAK9C,GAAG,aAvJhByH,EAAA,CAAgCD,qCCFjBsC,oLAXX,OACEjH,EAAA3F,EAAA4F,cAAA,OAAKsC,UAAU,OACbvC,EAAA3F,EAAA4F,cAACiH,GAAA,EAAD,KACElH,EAAA3F,EAAA4F,cAACkH,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzG,IACjCb,EAAA3F,EAAA4F,cAACkH,GAAA,EAAD,CAAOE,KAAK,MAAMC,UAAW1C,cANrB2C,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yECTNC,IAASC,OACP9H,EAAA3F,EAAA4F,cAAC8H,GAAA,EAAD,CAAeC,SAAUC,gBACvBjI,EAAA3F,EAAA4F,cAACiI,GAAD,OAEFC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eaab2f1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bij.baccab47.png\";","module.exports = __webpack_public_path__ + \"static/media/tent.8fb47b2d.png\";","module.exports = __webpack_public_path__ + \"static/media/tree.f3c11276.png\";","module.exports = __webpack_public_path__ + \"static/media/windmill.cc3908f0.png\";","export function getBounds(mapRef) {\r\n  return mapRef.current.leafletElement.getBounds();\r\n}\r\n\r\nexport function getCrs(mapRef) {\r\n  return mapRef.current.leafletElement.options.crs;\r\n}\r\n","import React from \"react\";\r\nimport produce from \"immer\";\r\nimport { getBounds, getCrs } from \"./leaflet-helpers\";\r\nimport { GeoJSON, FeatureGroup, LayersControl } from \"react-leaflet\";\r\nimport { circleMarker } from \"leaflet\";\r\n\r\nexport function initialState(componentContext) {\r\n  return {\r\n    zoom: 10,\r\n    wfsServices: {},\r\n    selectedWfsService: \"\",\r\n    dragged: false\r\n  };\r\n}\r\n\r\nexport function createWfs(name, url, resource, typename, minZoom, maxZoom) {\r\n  return { name, url, resource, typename, minZoom, maxZoom, features: [] };\r\n}\r\n\r\nexport function registerWFS(componentContext, ...wfss) {\r\n  componentContext.setState(\r\n    produce(componentContext.state, draft => {\r\n      draft.selectedWfsService = wfss[0].typename;\r\n      wfss.forEach(wfs => (draft.wfsServices[wfs.typename] = wfs));\r\n    })\r\n  );\r\n  console.log(componentContext.state);\r\n}\r\n\r\nexport async function retrieveWFSFeatures(componentContext) {\r\n  return Object.entries(componentContext.state.wfsServices)\r\n    .filter(([key, value]) => key === componentContext.state.selectedWfsService)\r\n    .map(([key, value]) => {\r\n      return retrieveFeatures(\r\n        componentContext,\r\n        value.url,\r\n        value.resource,\r\n        value.typename\r\n      );\r\n    });\r\n}\r\n\r\nexport async function retrieveFeatures(\r\n  componentContext,\r\n  url,\r\n  resource,\r\n  typename\r\n) {\r\n  const bounds = getBounds(componentContext.mapRef);\r\n  const crs = getCrs(componentContext.mapRef);\r\n\r\n  componentContext.setState(\r\n    produce(componentContext.state, draft => {\r\n      draft.wfsServices[typename].features = [];\r\n    })\r\n  );\r\n  for await (const features of getPlotsGeoJSONData2(\r\n    componentContext,\r\n    bounds,\r\n    crs,\r\n    url,\r\n    resource,\r\n    typename\r\n  )) {\r\n    const stateFeatures = componentContext.state.wfsServices[typename].features;\r\n    const filteredFeatures = features.filter(\r\n      feature =>\r\n        !stateFeatures.find(stateFeature => feature.id === stateFeature.id)\r\n    );\r\n    componentContext.setState(\r\n      produce(componentContext.state, draft => {\r\n        draft.wfsServices[typename].features.push(...filteredFeatures);\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nasync function* getPlotsGeoJSONData2(\r\n  componentContext,\r\n  bounds,\r\n  crs,\r\n  url,\r\n  resource,\r\n  typename\r\n) {\r\n  const southWest = crs.project(bounds.getSouthWest());\r\n  const northEast = crs.project(bounds.getNorthEast());\r\n\r\n  const bbox = `${southWest.x},${southWest.y},${northEast.x},${northEast.y}`;\r\n\r\n  const wfsUrl = `${url}/${resource}/wfs`;\r\n  const getPlots = startIndex =>\r\n    fetch(\r\n      `${wfsUrl}?SERVICE=WFS&REQUEST=GetFeature&VERSION=2.0.0&TYPENAMES=${typename}&OUTPUTFORMAT=json&STARTINDEX=${startIndex}&COUNT=100&SRSNAME=urn:ogc:def:crs:EPSG::4326&BBOX=${bbox},urn:ogc:def:crs:EPSG::3857`\r\n    );\r\n  const response = await getPlots(0);\r\n  const json = await response.json();\r\n  yield json.features;\r\n  const totalFeatures = json.totalFeatures;\r\n  console.log(totalFeatures);\r\n  while (\r\n    componentContext.state.wfsServices[typename].features.length < totalFeatures\r\n  ) {\r\n    const nextResponse = await getPlots(\r\n      componentContext.state.wfsServices[typename].features.length\r\n    );\r\n    const nextJson = await nextResponse.json();\r\n    yield nextJson.features;\r\n  }\r\n}\r\n\r\nexport function handleZoomEnd(componentContext) {\r\n  return e => {\r\n    const prev = componentContext.state.zoom;\r\n    const curr = e.target.getZoom();\r\n    console.log(curr);\r\n    const minZoom =\r\n      componentContext.state.wfsServices[\r\n        componentContext.state.selectedWfsService\r\n      ].minZoom;\r\n    const maxZoom =\r\n      componentContext.state.wfsServices[\r\n        componentContext.state.selectedWfsService\r\n      ].maxZoom;\r\n    componentContext.setState(\r\n      produce(componentContext.state, draft => {\r\n        draft.zoom = curr;\r\n      })\r\n    );\r\n    // TODO: Switch statement?\r\n    if (prev < minZoom && curr >= minZoom) {\r\n      retrieveWFSFeatures(componentContext);\r\n      componentContext.setState(\r\n        produce(componentContext.state, draft => {\r\n          draft.dragged = false;\r\n        })\r\n      );\r\n    } else if (prev >= minZoom && curr < minZoom) {\r\n      componentContext.setState(\r\n        produce(componentContext.state, draft => {\r\n          draft.wfsServices[\r\n            componentContext.state.selectedWfsService\r\n          ].features = [];\r\n        })\r\n      );\r\n    } else if (curr === minZoom + 1 && curr < prev) {\r\n      // If zoomed out to the max zoom level then put dragged to false as well\r\n      retrieveWFSFeatures(componentContext);\r\n      componentContext.setState(\r\n        produce(componentContext.state, draft => {\r\n          draft.dragged = false;\r\n        })\r\n      );\r\n    } else if (\r\n      curr >= minZoom &&\r\n      curr < prev &&\r\n      componentContext.state.dragged\r\n    ) {\r\n      // If dragged, then we need to get new BRP on zoom out\r\n      retrieveWFSFeatures(componentContext);\r\n    }\r\n  };\r\n}\r\n\r\nexport function handleDragEnd(componentContext) {\r\n  return () => {\r\n    const minZoom =\r\n      componentContext.state.wfsServices[\r\n        componentContext.state.selectedWfsService\r\n      ].minZoom;\r\n    const maxZoom =\r\n      componentContext.state.wfsServices[\r\n        componentContext.state.selectedWfsService\r\n      ].maxZoom;\r\n    if (componentContext.state.zoom >= minZoom) {\r\n      retrieveWFSFeatures(componentContext);\r\n      componentContext.setState(\r\n        produce(componentContext.state, draft => {\r\n          draft.dragged = true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nexport function onPointToLayer(feature, latlng) {\r\n  // console.log(feature.properties.value + 200);\r\n  return circleMarker(latlng, {\r\n    radius: 8,\r\n    fillColor: \"#ff7800\",\r\n    color: \"#000\",\r\n    weight: 1,\r\n    opacity: 1,\r\n    fillOpacity: 0.8\r\n  });\r\n}\r\n\r\nexport function createFeatureLayers(componentContext, onFeatureClick) {\r\n  return Object.entries(componentContext.state.wfsServices)\r\n    .filter(([key, value]) => key === componentContext.state.selectedWfsService)\r\n    .map(([key, value]) => (\r\n      <FeatureGroup key={key} onClick={onFeatureClick}>\r\n        {value.features.map(geoJSONData => (\r\n          <GeoJSON\r\n            data={geoJSONData}\r\n            key={geoJSONData.id}\r\n            style={{ color: \"blue\" }}\r\n            pointToLayer={onPointToLayer}\r\n          />\r\n        ))}\r\n      </FeatureGroup>\r\n    ));\r\n}\r\n\r\nexport function selectWfsService(componentContext) {\r\n  return e => {\r\n    const minZoom = componentContext.state.wfsServices[e.target.value].minZoom;\r\n    const maxZoom = componentContext.state.wfsServices[e.target.value].maxZoom;\r\n    componentContext.setState(\r\n      produce(componentContext.state, draft => {\r\n        draft.wfsServices[\r\n          componentContext.state.selectedWfsService\r\n        ].features = [];\r\n        draft.selectedWfsService = e.target.value;\r\n      })\r\n    );\r\n\r\n    if (componentContext.state.zoom >= minZoom) {\r\n      // Using this so we can use the call back that gets called once react rerendered the component\r\n      componentContext.forceUpdate(() => {\r\n        retrieveWFSFeatures(componentContext);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function wfsServiceDropdown(componentContext) {\r\n  return (\r\n    <select\r\n      onChange={selectWfsService(componentContext)}\r\n      value={componentContext.state.selectedWfsService}\r\n    >\r\n      {Object.entries(componentContext.state.wfsServices).map(\r\n        ([key, value]) => (\r\n          <option key={key} value={key}>\r\n            {value.name}\r\n          </option>\r\n        )\r\n      )}\r\n    </select>\r\n  );\r\n}\r\n","import React, { PureComponent, createRef } from \"react\";\r\n\r\nimport \"./viewer.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport {\r\n  Map,\r\n  TileLayer,\r\n  WMSTileLayer,\r\n  LayersControl,\r\n  LayerGroup\r\n} from \"react-leaflet\";\r\nimport produce from \"immer\";\r\nimport {\r\n  createFeatureLayers,\r\n  handleZoomEnd,\r\n  handleDragEnd,\r\n  initialState,\r\n  registerWFS,\r\n  createWfs,\r\n  wfsServiceDropdown\r\n} from \"../utils/wfs-helper\";\r\n\r\nconst { BaseLayer, Overlay } = LayersControl;\r\n\r\nclass Viewer extends PureComponent {\r\n  mapRef = createRef();\r\n\r\n  selectedLayer;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = produce(initialState(), draft => {\r\n      draft.lat = 51.84276079;\r\n      draft.lon = 5.18380148;\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    registerWFS(\r\n      this,\r\n      createWfs(\r\n        \"BRP Gewaspercelen\",\r\n        \"https://geodata.nationaalgeoregister.nl\",\r\n        \"brpgewaspercelen\",\r\n        \"brpgewaspercelen:brpgewaspercelen\",\r\n        14,\r\n        undefined\r\n      ),\r\n      createWfs(\r\n        \"Basis registratie Kadaster\",\r\n        \"https://geodata.nationaalgeoregister.nl\",\r\n        \"kadastralekaartv3\",\r\n        \"kadastralekaartv3:perceel\",\r\n        14,\r\n        undefined\r\n      ),\r\n      createWfs(\r\n        \"Agrarisch Areaal Nederland (AAN)\",\r\n        \"https://geodata.nationaalgeoregister.nl\",\r\n        \"aan\",\r\n        \"aan:aan\",\r\n        14,\r\n        undefined\r\n      ),\r\n      createWfs(\r\n        \"BAG\",\r\n        \"https://geodata.nationaalgeoregister.nl/\",\r\n        \"bag\",\r\n        \"bag:pand\",\r\n        14,\r\n        undefined\r\n      ),\r\n      createWfs(\r\n        \"Adressen\",\r\n        \"https://geodata.nationaalgeoregister.nl/\",\r\n        \"inspireadressen\",\r\n        \"inspireadressen:inspireadressen\",\r\n        14,\r\n        undefined\r\n      ),\r\n      // Kan alleen xml\r\n      // createWfs(\r\n      //   \"Fysisch Geografische Regio’s\",\r\n      //   \"https://geodata.nationaalgeoregister.nl/\",\r\n      //   \"fysischgeografischeregios\",\r\n      //   \"fysischgeografischeregios:fysischgeografischeregios\"\r\n      // ),\r\n      createWfs(\r\n        \"Bodemkaart 1:50.000\",\r\n        \"https://geodata.nationaalgeoregister.nl/\",\r\n        \"bodemkaart50000\",\r\n        \"bodemkaart50000:bodemkaart50000\",\r\n        14,\r\n        undefined\r\n      ),\r\n      // createWfs(\r\n      //   \"Bestand bodemgebruik (CBS)\",\r\n      //   \"https://geodata.nationaalgeoregister.nl/\",\r\n      //   \"bestandbodemgebruik2015\",\r\n      //   \"bestandbodemgebruik2015:bbg2015_hoofdgroep\"\r\n      // ),\r\n      createWfs(\r\n        \"Landsgrens\",\r\n        \"https://geodata.nationaalgeoregister.nl\",\r\n        \"bestuurlijkegrenzen\",\r\n        \"bestuurlijkegrenzen:landsgrens\",\r\n        2,\r\n        undefined\r\n      ),\r\n      createWfs(\r\n        \"Provincies\",\r\n        \"https://geodata.nationaalgeoregister.nl\",\r\n        \"bestuurlijkegrenzen\",\r\n        \"bestuurlijkegrenzen:provincies\",\r\n        2,\r\n        undefined\r\n      ),\r\n      createWfs(\r\n        \"Gemeenten\",\r\n        \"https://geodata.nationaalgeoregister.nl\",\r\n        \"bestuurlijkegrenzen\",\r\n        \"bestuurlijkegrenzen:gemeenten\",\r\n        2,\r\n        undefined\r\n      )\r\n    );\r\n  }\r\n\r\n  handleFeatureClick = e => {\r\n    if (this.selectedLayer) {\r\n      this.selectedLayer.setStyle({\r\n        color: \"blue\"\r\n      });\r\n    }\r\n    this.selectedLayer = e.layer;\r\n    this.selectedLayer.setStyle({\r\n      color: \"red\"\r\n    });\r\n\r\n    this.selectedLayer.bringToFront();\r\n    console.log(e.layer.feature.properties);\r\n  };\r\n\r\n  render() {\r\n    const position = [this.state.lat, this.state.lon];\r\n    return (\r\n      <div className=\"map\">\r\n        <div className=\"wfs-dropdown\">{wfsServiceDropdown(this)}</div>\r\n        <Map\r\n          center={position}\r\n          zoom={this.state.zoom}\r\n          onZoomEnd={handleZoomEnd(this)}\r\n          onDragEnd={handleDragEnd(this)}\r\n          onClick={this.handleClick}\r\n          onLocationfound={this.handleLocationFound}\r\n          ref={this.mapRef}\r\n          className=\"leaflet-map\"\r\n        >\r\n          <LayersControl position=\"topright\">\r\n            <BaseLayer name=\"OpenStreetMap\">\r\n              <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              />\r\n            </BaseLayer>\r\n            {/* <BaseLayer name=\"Test\">\r\n                <TileLayer\r\n                  attribution=\"&amp;copy PDOK\"\r\n                  url=\"https://geodata.nationaalgeoregister.nl/luchtfoto/infrarood/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=Actueel_ortho25IR&STYLE=default&TILEMATRIXSET=EPSG:3857&TILEMATRIX={z}&TILEROW={x}&TILECOL={y}&FORMAT=image%2Fpng\"\r\n                />\r\n              </BaseLayer> */}\r\n            <BaseLayer checked name=\"Luchtfoto\">\r\n              <LayerGroup>\r\n                <WMSTileLayer\r\n                  url=\"https://geodata.nationaalgeoregister.nl/luchtfoto/rgb/wms?\"\r\n                  layers=\"Actueel_ortho25\"\r\n                />\r\n                {/* <TileLayer\r\n                    url=\"https://geodata.nationaalgeoregister.nl/tiles/service/tms/1.0.0/lufolabels/EPSG:28992/{z}/{x}/{y}.png\"\r\n                    tms={true}\r\n                  /> */}\r\n              </LayerGroup>\r\n            </BaseLayer>\r\n            <BaseLayer name=\"Luchtfoto Infrarood\">\r\n              <WMSTileLayer\r\n                url=\"https://geodata.nationaalgeoregister.nl/luchtfoto/infrarood/wms?\"\r\n                layers=\"Actueel_ortho25IR\"\r\n              />\r\n            </BaseLayer>\r\n            <Overlay name=\"Kilometer vakken\">\r\n              <WMSTileLayer\r\n                url=\"http://geoserver.has.nl/geoserver/food4bees/wms?\"\r\n                layers=\"food4bees:kmvakmetdrachtwaardecombi_v1\"\r\n                tiled={true}\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                serverType=\"geoserver\"\r\n                opacity={0.8}\r\n                version=\"1.3.0\"\r\n              />\r\n            </Overlay>\r\n            <Overlay name=\"BRP Gewaspercelen (WMS)\">\r\n              <WMSTileLayer\r\n                url=\"https://geodata.nationaalgeoregister.nl/brpgewaspercelen/wms?\"\r\n                layers=\"brpgewaspercelen:brpgewaspercelen\"\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                opacity={0.8}\r\n              />\r\n            </Overlay>\r\n            <Overlay name=\"gemiddelde toegevoegde waarde per hectare weer van voedselteelten in de akkerbouw (2011-2014)\">\r\n              <WMSTileLayer\r\n                url=\"http://geodata.rivm.nl/geoserver/wms?\"\r\n                layers=\"dank:lei_l1a_gc_akkerbvoed\"\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                opacity={0.8}\r\n              />\r\n            </Overlay>\r\n            <Overlay name=\"Agrarisch Areaal Nederland (AAN)\">\r\n              <WMSTileLayer\r\n                url=\"https://geodata.nationaalgeoregister.nl/aan/wms?\"\r\n                layers=\"aan\"\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                opacity={0.8}\r\n              />\r\n            </Overlay>\r\n            <Overlay name=\"Actueel Hoogtebestand Nederland 3\">\r\n              <WMSTileLayer\r\n                url=\"https://geodata.nationaalgeoregister.nl/ahn3/wms\"\r\n                layers=\"ahn3_05m_dsm\"\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                opacity={0.8}\r\n              />\r\n            </Overlay>\r\n            <Overlay name=\"Bestand bodemgebruik\">\r\n              <WMSTileLayer\r\n                url=\"https://geodata.nationaalgeoregister.nl/bestandbodemgebruik2015/wms\"\r\n                layers=\"bbg2015\"\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                opacity={0.8}\r\n              />\r\n            </Overlay>\r\n            {/* <Overlay checked name=\"geoJson\">\r\n              <GeoJSON data={this.geoJson} />\r\n            </Overlay> */}\r\n          </LayersControl>\r\n          {createFeatureLayers(this, this.handleFeatureClick)}\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Viewer;\r\n","import React, { PureComponent, createRef } from \"react\";\r\nimport \"ol/ol.css\";\r\nimport \"./open-layers.css\";\r\nimport { Map, View } from \"ol\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport GeoJSON from \"ol/format/GeoJSON.js\";\r\nimport VectorSource from \"ol/source/Vector.js\";\r\nimport { bbox as bboxStrategy } from \"ol/loadingstrategy.js\";\r\nimport { Fill, Stroke, Style } from \"ol/style.js\";\r\n\r\nimport Natuur from \"../Natuur\";\r\nimport Bestemmingsplan from \"../Bestemmingsplan\";\r\nimport produce from \"immer\";\r\n\r\nimport bij from \"../images/bij.png\";\r\nimport tent from \"../images/tent.png\";\r\nimport tree from \"../images/tree.png\";\r\nimport windmill from \"../images/windmill.png\";\r\n\r\nexport class OpenLayers extends PureComponent {\r\n  map;\r\n  currentLayer;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = produce({}, draft => {\r\n      draft.radio = \"\";\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.map = new Map({\r\n      target: \"map\",\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM()\r\n        })\r\n      ],\r\n      view: new View({\r\n        center: [638956.992885993327945, 6826972.975618642754853], // Ongeveer midden Nederland\r\n        zoom: 12\r\n      })\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.radio !== this.state.radio) {\r\n      if (this.currentLayer) {\r\n        this.map.removeLayer(this.currentLayer);\r\n        this.currentLayer = undefined;\r\n      }\r\n\r\n      if (this.state.radio === \"windmolen\") {\r\n        const vectorSource = new VectorSource({\r\n          features: new GeoJSON().readFeatures(Bestemmingsplan)\r\n        });\r\n        this.currentLayer = new VectorLayer({\r\n          source: vectorSource,\r\n          style: new Style({\r\n            fill: new Fill({\r\n              color: \"rgba(0, 0, 255, 0.4)\"\r\n            }),\r\n            stroke: new Stroke({\r\n              color: \"rgba(0, 0, 255, 1.0)\",\r\n              width: 2\r\n            })\r\n          })\r\n        });\r\n\r\n        this.map.addLayer(this.currentLayer);\r\n      }\r\n\r\n      if (this.state.radio === \"voedselbos\") {\r\n        const vectorSource2 = new VectorSource({\r\n          features: new GeoJSON().readFeatures(Natuur)\r\n        });\r\n        this.currentLayer = new VectorLayer({\r\n          source: vectorSource2,\r\n          style: new Style({\r\n            fill: new Fill({\r\n              color: \"rgba(0, 255, 0, 0.4)\"\r\n            }),\r\n            stroke: new Stroke({\r\n              color: \"rgba(0, 255, 0, 1.0)\",\r\n              width: 2\r\n            })\r\n          })\r\n        });\r\n\r\n        this.map.addLayer(this.currentLayer);\r\n      }\r\n\r\n      if (this.state.radio === \"bijenkast\") {\r\n      }\r\n\r\n      if (this.state.radio === \"camping\") {\r\n      }\r\n    }\r\n  }\r\n\r\n  onRadioChange = e => {\r\n    this.setState(\r\n      produce(this.state, draft => {\r\n        draft.radio = e.currentTarget.value;\r\n      })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"side\">\r\n          <div className=\"radios\">\r\n            <p>Kansen:</p>\r\n            <div className=\"radio-button\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"windmolen\"\r\n                name=\"kansen\"\r\n                value=\"windmolen\"\r\n                checked={this.state.radio === \"windmolen\"}\r\n                onChange={this.onRadioChange}\r\n              />\r\n              <label htmlFor=\"windmolen\">\r\n                Windmolen{\" \"}\r\n                <img src={windmill} alt=\"Windmolen\" className=\"icon\" />\r\n              </label>\r\n            </div>\r\n            <div className=\"radio-button\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"voedselbos\"\r\n                name=\"kansen\"\r\n                value=\"voedselbos\"\r\n                checked={this.state.radio === \"voedselbos\"}\r\n                onChange={this.onRadioChange}\r\n              />\r\n              <label htmlFor=\"voedselbos\">\r\n                Voedselbos <img src={tree} alt=\"Natuur\" className=\"icon\" />\r\n              </label>\r\n            </div>\r\n            <div className=\"radio-button\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"bijenkast\"\r\n                name=\"kansen\"\r\n                value=\"bijenkast\"\r\n                checked={this.state.radio === \"bijenkast\"}\r\n                onChange={this.onRadioChange}\r\n              />\r\n              <label htmlFor=\"bijenkast\">\r\n                Bijenkast <img src={bij} alt=\"Bijenkast\" className=\"icon\" />\r\n              </label>\r\n            </div>\r\n            <div className=\"radio-button\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"camping\"\r\n                name=\"kansen\"\r\n                value=\"camping\"\r\n                checked={this.state.radio === \"camping\"}\r\n                onChange={this.onRadioChange}\r\n              />\r\n              <label htmlFor=\"camping\">\r\n                Camping <img src={tent} alt=\"Camping\" className=\"icon\" />\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div id=\"map\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Viewer from \"./viewer/viewer\";\r\nimport { OpenLayers } from \"./open-layers/open-layers\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Viewer} />\r\n          <Route path=\"/v2\" component={OpenLayers} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}