{"version":3,"sources":["images/bij.png","images/tent.png","images/tree.png","images/windmill.png","images/logo.png","utils/leaflet-helpers.js","utils/wfs-helper.js","viewer/viewer.js","open-layers/open-layers.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getCrs","mapRef","current","leafletElement","options","crs","Overlay","LayersControl","createWfs","name","url","resource","typename","features","selected","retrieveWFSFeatures","_x7","_retrieveWFSFeatures","apply","this","arguments","_callee2","componentContext","regenerator_default","a","wrap","_context2","prev","next","abrupt","Object","entries","state","wfsServices","map","_ref3","_ref4","slicedToArray","key","value","retrieveFeatures","stop","_x8","_x9","_x10","_x11","_retrieveFeatures","_callee3","bounds","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_loop","_iterator","_step","_value","_context3","getBounds","setState","produce","draft","stateFeatures","filteredFeatures","filter","feature","find","stateFeature","id","_draft$wfsServices$re","push","toConsumableArray","asyncIterator","getPlotsGeoJSONData2","sent","done","t0","return","finish","_callee","southWest","northEast","bbox","wfsUrl","getPlots","response","json","totalFeatures","nextResponse","nextJson","_context","project","getSouthWest","getNorthEast","concat","x","y","startIndex","fetch","awaitAsyncGenerator","length","BaseLayer","PureComponent","OpenLayers","_PureComponent","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onRadioChange","e","radio","currentTarget","inherits","createClass","vectorSource","VectorSource","GeoJSON","readFeatures","Gemeentegrens","vectorLayer","VectorLayer","source","style","Style","stroke","Stroke","color","width","Map","target","layers","TileLayer","OSM","view","View","center","zoom","prevProps","prevState","currentLayer","removeLayer","undefined","currentLayer2","geoJson","objectSpread","Selectie","properties","fill","Fill","addLayer","geoJson2","vectorSource2","react_default","createElement","className","src","logo","alt","type","checked","onChange","htmlFor","windmill","tree","bij","tent","App","Switch","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e41117bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bij.baccab47.png\";","module.exports = __webpack_public_path__ + \"static/media/tent.8fb47b2d.png\";","module.exports = __webpack_public_path__ + \"static/media/tree.f3c11276.png\";","module.exports = __webpack_public_path__ + \"static/media/windmill.cc3908f0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.89501e62.png\";","export function getBounds(mapRef) {\r\n  return mapRef.current.leafletElement.getBounds();\r\n}\r\n\r\nexport function getCrs(mapRef) {\r\n  return mapRef.current.leafletElement.options.crs;\r\n}\r\n","import React from \"react\";\r\nimport produce from \"immer\";\r\nimport { getBounds, getCrs } from \"./leaflet-helpers\";\r\nimport { GeoJSON, FeatureGroup, LayersControl } from \"react-leaflet\";\r\nconst { Overlay } = LayersControl;\r\n\r\nexport function initialState(componentContext) {\r\n  return {\r\n    zoom: 10,\r\n    wfsServices: {},\r\n    dragged: false\r\n  };\r\n}\r\n\r\nexport function createWfs(name, url, resource, typename) {\r\n  return { name, url, resource, typename, features: [], selected: false };\r\n}\r\n\r\nexport function registerWFS(componentContext, ...wfss) {\r\n  componentContext.setState(\r\n    produce(componentContext.state, draft => {\r\n      wfss.forEach(wfs => (draft.wfsServices[wfs.resource] = wfs));\r\n    })\r\n  );\r\n  console.log(componentContext.state);\r\n}\r\n\r\nexport async function retrieveWFSFeatures(componentContext) {\r\n  return Object.entries(componentContext.state.wfsServices).map(\r\n    ([key, value]) => {\r\n      return retrieveFeatures(componentContext, value.url, key, value.typename);\r\n    }\r\n  );\r\n}\r\n\r\nexport async function retrieveFeatures(\r\n  componentContext,\r\n  url,\r\n  resource,\r\n  typename\r\n) {\r\n  const bounds = getBounds(componentContext.mapRef);\r\n  const crs = getCrs(componentContext.mapRef);\r\n\r\n  componentContext.setState(\r\n    produce(componentContext.state, draft => {\r\n      draft.wfsServices[resource].features = [];\r\n    })\r\n  );\r\n  for await (const features of getPlotsGeoJSONData2(\r\n    componentContext,\r\n    bounds,\r\n    crs,\r\n    url,\r\n    resource,\r\n    typename\r\n  )) {\r\n    const stateFeatures = componentContext.state.wfsServices[resource].features;\r\n    const filteredFeatures = features.filter(\r\n      feature =>\r\n        !stateFeatures.find(stateFeature => feature.id === stateFeature.id)\r\n    );\r\n    componentContext.setState(\r\n      produce(componentContext.state, draft => {\r\n        draft.wfsServices[resource].features.push(...filteredFeatures);\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nasync function* getPlotsGeoJSONData2(\r\n  componentContext,\r\n  bounds,\r\n  crs,\r\n  url,\r\n  resource,\r\n  name\r\n) {\r\n  const southWest = crs.project(bounds.getSouthWest());\r\n  const northEast = crs.project(bounds.getNorthEast());\r\n\r\n  const bbox = `${southWest.x},${southWest.y},${northEast.x},${northEast.y}`;\r\n\r\n  const wfsUrl = `${url}/${resource}/wfs`;\r\n  const getPlots = startIndex =>\r\n    fetch(\r\n      `${wfsUrl}?SERVICE=WFS&REQUEST=GetFeature&VERSION=2.0.0&TYPENAMES=${name}&OUTPUTFORMAT=json&STARTINDEX=${startIndex}&COUNT=200&SRSNAME=urn:ogc:def:crs:EPSG::4326&BBOX=${bbox},urn:ogc:def:crs:EPSG::3857`\r\n    );\r\n  const response = await getPlots(0);\r\n  const json = await response.json();\r\n  yield json.features;\r\n  const totalFeatures = json.totalFeatures;\r\n  while (\r\n    componentContext.state.wfsServices[resource].features.length < totalFeatures\r\n  ) {\r\n    const nextResponse = await getPlots(\r\n      componentContext.state.wfsServices[resource].features.length\r\n    );\r\n    const nextJson = await nextResponse.json();\r\n    yield nextJson.features;\r\n  }\r\n}\r\n\r\nexport function handleZoomEnd(componentContext) {\r\n  return e => {\r\n    const prev = componentContext.state.zoom;\r\n    const curr = e.target.getZoom();\r\n    componentContext.setState(\r\n      produce(componentContext.state, draft => {\r\n        draft.zoom = curr;\r\n      })\r\n    );\r\n    // TODO: Switch statement?\r\n    if (prev < 15 && curr > 14) {\r\n      retrieveWFSFeatures(componentContext);\r\n      componentContext.setState(\r\n        produce(componentContext.state, draft => {\r\n          draft.dragged = false;\r\n        })\r\n      );\r\n    } else if (prev > 14 && curr < 15) {\r\n      componentContext.setState(\r\n        produce(componentContext.state, draft => {\r\n          draft.features = {};\r\n        })\r\n      );\r\n    } else if (curr === 15 && curr < prev) {\r\n      // If zoomed out to the max zoom level then put dragged to false as well\r\n      retrieveWFSFeatures(componentContext);\r\n      componentContext.setState(\r\n        produce(componentContext.state, draft => {\r\n          draft.dragged = false;\r\n        })\r\n      );\r\n    } else if (curr > 14 && curr < prev && componentContext.state.dragged) {\r\n      // If dragged, then we need to get new BRP on zoom out\r\n      retrieveWFSFeatures(componentContext);\r\n    }\r\n  };\r\n}\r\n\r\nexport function handleDragEnd(componentContext) {\r\n  return () => {\r\n    if (componentContext.state.zoom > 14) {\r\n      retrieveWFSFeatures(componentContext);\r\n      componentContext.setState(\r\n        produce(componentContext.state, draft => {\r\n          draft.dragged = true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nexport function createFeatureLayers(componentContext, onFeatureClick) {\r\n  return Object.entries(componentContext.state.wfsServices).map(\r\n    ([key, value]) => (\r\n      <Overlay key={key} name={`${value.name} (WFS)`}>\r\n        <FeatureGroup onClick={onFeatureClick}>\r\n          {value.features.map(geoJSONData => (\r\n            <GeoJSON\r\n              data={geoJSONData}\r\n              key={geoJSONData.id}\r\n              style={{ color: \"blue\" }}\r\n            />\r\n          ))}\r\n        </FeatureGroup>\r\n      </Overlay>\r\n    )\r\n  );\r\n}\r\n","import React, { PureComponent, createRef } from \"react\";\r\n\r\nimport \"./viewer.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport {\r\n  Map,\r\n  TileLayer,\r\n  WMSTileLayer,\r\n  GeoJSON,\r\n  LayersControl,\r\n  LayerGroup\r\n} from \"react-leaflet\";\r\nimport produce from \"immer\";\r\nimport {\r\n  retrieveFeatures,\r\n  createFeatureLayers,\r\n  handleZoomEnd,\r\n  handleDragEnd,\r\n  setState,\r\n  initialState,\r\n  registerWFS,\r\n  createWfs\r\n} from \"../utils/wfs-helper\";\r\n\r\nimport Natuur from \"../Natuur\";\r\nimport Bestemmingsplan from \"../Bestemmingsplan\";\r\n\r\nconst { BaseLayer, Overlay } = LayersControl;\r\n\r\nclass Viewer extends PureComponent {\r\n  mapRef = createRef();\r\n\r\n  selectedLayer;\r\n\r\n  geoJson = Natuur;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = produce(initialState(), draft => {\r\n      draft.lat = 51.84276079;\r\n      draft.lon = 5.18380148;\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    registerWFS(\r\n      this,\r\n      createWfs(\r\n        \"BRP Gewaspercelen\",\r\n        \"https://geodata.nationaalgeoregister.nl\",\r\n        \"brpgewaspercelen\",\r\n        \"brpgewaspercelen:brpgewaspercelen\"\r\n      ),\r\n      createWfs(\r\n        \"Basis registratie Kadaster\",\r\n        \"https://geodata.nationaalgeoregister.nl\",\r\n        \"kadastralekaartv3\",\r\n        \"kadastralekaartv3:perceel\"\r\n      )\r\n    );\r\n  }\r\n\r\n  handleFeatureClick = e => {\r\n    if (this.selectedLayer) {\r\n      this.selectedLayer.setStyle({\r\n        color: \"blue\"\r\n      });\r\n    }\r\n    this.selectedLayer = e.layer;\r\n    this.selectedLayer.setStyle({\r\n      color: \"red\"\r\n    });\r\n\r\n    console.log(e);\r\n  };\r\n\r\n  render() {\r\n    const position = [this.state.lat, this.state.lon];\r\n    return (\r\n      <div className=\"map\">\r\n        <div className=\"sideBar\">test</div>\r\n        {/* <select>\r\n          {Object.entries(this.state.wfsServices).map(([key, value]) => (\r\n            <option key={key} value={key}>\r\n              {value.name}\r\n            </option>\r\n          ))}\r\n        </select> */}\r\n        <Map\r\n          center={position}\r\n          zoom={this.state.zoom}\r\n          onZoomEnd={handleZoomEnd(this)}\r\n          onDragEnd={handleDragEnd(this)}\r\n          style={{ height: \"100vh\" }}\r\n          onClick={this.handleClick}\r\n          onLocationfound={this.handleLocationFound}\r\n          ref={this.mapRef}\r\n        >\r\n          <LayersControl position=\"topright\">\r\n            <BaseLayer name=\"OpenStreetMap\">\r\n              <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              />\r\n            </BaseLayer>\r\n            {/* <BaseLayer name=\"Test\">\r\n                <TileLayer\r\n                  attribution=\"&amp;copy PDOK\"\r\n                  url=\"https://geodata.nationaalgeoregister.nl/luchtfoto/infrarood/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=Actueel_ortho25IR&STYLE=default&TILEMATRIXSET=EPSG:3857&TILEMATRIX={z}&TILEROW={x}&TILECOL={y}&FORMAT=image%2Fpng\"\r\n                />\r\n              </BaseLayer> */}\r\n            <BaseLayer checked name=\"Luchtfoto\">\r\n              <LayerGroup>\r\n                <WMSTileLayer\r\n                  url=\"https://geodata.nationaalgeoregister.nl/luchtfoto/rgb/wms?\"\r\n                  layers=\"Actueel_ortho25\"\r\n                />\r\n                {/* <TileLayer\r\n                    url=\"https://geodata.nationaalgeoregister.nl/tiles/service/tms/1.0.0/lufolabels/EPSG:28992/{z}/{x}/{y}.png\"\r\n                    tms={true}\r\n                  /> */}\r\n              </LayerGroup>\r\n            </BaseLayer>\r\n            <BaseLayer name=\"Luchtfoto Infrarood\">\r\n              <WMSTileLayer\r\n                url=\"https://geodata.nationaalgeoregister.nl/luchtfoto/infrarood/wms?\"\r\n                layers=\"Actueel_ortho25IR\"\r\n              />\r\n            </BaseLayer>\r\n            {createFeatureLayers(this, this.handleFeatureClick)}\r\n            <Overlay name=\"BRP Gewaspercelen (WMS)\">\r\n              <WMSTileLayer\r\n                url=\"https://geodata.nationaalgeoregister.nl/brpgewaspercelen/wms?\"\r\n                layers=\"brpgewaspercelen:brpgewaspercelen\"\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                opacity={0.8}\r\n              />\r\n            </Overlay>\r\n            <Overlay name=\"gemiddelde toegevoegde waarde per hectare weer van voedselteelten in de akkerbouw (2011-2014)\">\r\n              <WMSTileLayer\r\n                url=\"http://geodata.rivm.nl/geoserver/wms?\"\r\n                layers=\"dank:lei_l1a_gc_akkerbvoed\"\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                opacity={0.8}\r\n              />\r\n            </Overlay>\r\n            <Overlay name=\"Agrarisch Areaal Nederland (AAN)\">\r\n              <WMSTileLayer\r\n                url=\"https://geodata.nationaalgeoregister.nl/aan/wms?\"\r\n                layers=\"aan\"\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                opacity={0.8}\r\n              />\r\n            </Overlay>\r\n            <Overlay name=\"Actueel Hoogtebestand Nederland 3\">\r\n              <WMSTileLayer\r\n                url=\"https://geodata.nationaalgeoregister.nl/ahn3/wms\"\r\n                layers=\"ahn3_05m_dsm\"\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                opacity={0.8}\r\n              />\r\n            </Overlay>\r\n            <Overlay name=\"Bestand bodemgebruik\">\r\n              <WMSTileLayer\r\n                url=\"https://geodata.nationaalgeoregister.nl/bestandbodemgebruik2015/wms\"\r\n                layers=\"bbg2015\"\r\n                transparent={true}\r\n                format=\"image/png\"\r\n                opacity={0.8}\r\n              />\r\n            </Overlay>\r\n            <Overlay checked name=\"geoJson\">\r\n              <GeoJSON data={this.geoJson} />\r\n            </Overlay>\r\n          </LayersControl>\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Viewer;\r\n","import React, { PureComponent, createRef } from \"react\";\r\nimport \"ol/ol.css\";\r\nimport \"./open-layers.css\";\r\nimport { Map, View } from \"ol\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport OSM from \"ol/source/OSM\";\r\nimport GeoJSON from \"ol/format/GeoJSON.js\";\r\nimport VectorSource from \"ol/source/Vector.js\";\r\nimport { bbox as bboxStrategy } from \"ol/loadingstrategy.js\";\r\nimport { Fill, Stroke, Style } from \"ol/style.js\";\r\n\r\nimport Natuur from \"../Natuur\";\r\nimport Bestemmingsplan from \"../Bestemmingsplan\";\r\nimport Selectie from \"../Selectie\";\r\nimport Gemeentegrens from \"../Gemeentegrens\";\r\nimport produce from \"immer\";\r\n\r\nimport bij from \"../images/bij.png\";\r\nimport tent from \"../images/tent.png\";\r\nimport tree from \"../images/tree.png\";\r\nimport windmill from \"../images/windmill.png\";\r\n\r\nimport logo from \"../images/logo.png\";\r\n\r\nexport class OpenLayers extends PureComponent {\r\n  map;\r\n  currentLayer;\r\n  currentLayer2;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = produce({}, draft => {\r\n      draft.radio = \"\";\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const vectorSource = new VectorSource({\r\n      features: new GeoJSON().readFeatures(Gemeentegrens)\r\n    });\r\n    const vectorLayer = new VectorLayer({\r\n      source: vectorSource,\r\n      style: new Style({\r\n        stroke: new Stroke({\r\n          color: \"rgba(0, 0, 255, 1)\",\r\n          width: 2\r\n        })\r\n      })\r\n    });\r\n\r\n    this.map = new Map({\r\n      target: \"map\",\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM()\r\n        }),\r\n        vectorLayer\r\n      ],\r\n      view: new View({\r\n        center: [638956.992885993327945, 6826972.975618642754853], // Ongeveer midden Nederland\r\n        zoom: 12\r\n      })\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.radio !== this.state.radio) {\r\n      if (this.currentLayer) {\r\n        this.map.removeLayer(this.currentLayer);\r\n        this.currentLayer = undefined;\r\n      }\r\n\r\n      if (this.currentLayer2) {\r\n        this.map.removeLayer(this.currentLayer2);\r\n        this.currentLayer2 = undefined;\r\n      }\r\n\r\n      if (this.state.radio === \"windmolen\") {\r\n        // const vectorSource = new VectorSource({\r\n        //   features: new GeoJSON().readFeatures(Selectie)\r\n        // });\r\n        // this.currentLayer = new VectorLayer({\r\n        //   source: vectorSource,\r\n        //   style: new Style({\r\n        //     fill: new Fill({\r\n        //       color: \"rgba(0, 0, 255, 0.4)\"\r\n        //     }),\r\n        //     stroke: new Stroke({\r\n        //       color: \"rgba(0, 0, 255, 1.0)\",\r\n        //       width: 2\r\n        //     })\r\n        //   })\r\n        // });\r\n        // this.map.addLayer(this.currentLayer);\r\n      }\r\n\r\n      if (this.state.radio === \"voedselbos\") {\r\n        let geoJson = { ...Selectie };\r\n        geoJson.features = Selectie.features.filter(\r\n          feature => feature.properties.Selectie === \"Voedselbos\"\r\n        );\r\n\r\n        const vectorSource = new VectorSource({\r\n          features: new GeoJSON().readFeatures(geoJson)\r\n        });\r\n        this.currentLayer = new VectorLayer({\r\n          source: vectorSource,\r\n          style: new Style({\r\n            fill: new Fill({\r\n              color: \"rgba(0, 255, 0, 0.4)\"\r\n            })\r\n          })\r\n        });\r\n\r\n        this.map.addLayer(this.currentLayer);\r\n\r\n        let geoJson2 = { ...Selectie };\r\n        geoJson2.features = Selectie.features.filter(\r\n          feature => feature.properties.Selectie !== \"Voedselbos\"\r\n        );\r\n\r\n        const vectorSource2 = new VectorSource({\r\n          features: new GeoJSON().readFeatures(geoJson2)\r\n        });\r\n        this.currentLayer2 = new VectorLayer({\r\n          source: vectorSource2,\r\n          style: new Style({\r\n            fill: new Fill({\r\n              color: \"rgba(255, 0, 0, 0.4)\"\r\n            })\r\n            // stroke: new Stroke({\r\n            //   color: \"rgba(0, 255, 0, 1.0)\",\r\n            //   width: 2\r\n            // })\r\n          })\r\n        });\r\n\r\n        this.map.addLayer(this.currentLayer2);\r\n      }\r\n\r\n      if (this.state.radio === \"bijenkast\") {\r\n        let geoJson = { ...Selectie };\r\n        geoJson.features = Selectie.features.filter(\r\n          feature => feature.properties.Selectie === \"Bijenkast\"\r\n        );\r\n\r\n        const vectorSource = new VectorSource({\r\n          features: new GeoJSON().readFeatures(geoJson)\r\n        });\r\n        this.currentLayer = new VectorLayer({\r\n          source: vectorSource,\r\n          style: new Style({\r\n            fill: new Fill({\r\n              color: \"rgba(0, 255, 0, 0.4)\"\r\n            })\r\n          })\r\n        });\r\n\r\n        this.map.addLayer(this.currentLayer);\r\n\r\n        let geoJson2 = { ...Selectie };\r\n        geoJson2.features = Selectie.features.filter(\r\n          feature => feature.properties.Selectie !== \"Bijenkast\"\r\n        );\r\n\r\n        const vectorSource2 = new VectorSource({\r\n          features: new GeoJSON().readFeatures(geoJson2)\r\n        });\r\n        this.currentLayer2 = new VectorLayer({\r\n          source: vectorSource2,\r\n          style: new Style({\r\n            fill: new Fill({\r\n              color: \"rgba(255, 0, 0, 0.4)\"\r\n            })\r\n            // stroke: new Stroke({\r\n            //   color: \"rgba(0, 255, 0, 1.0)\",\r\n            //   width: 2\r\n            // })\r\n          })\r\n        });\r\n\r\n        this.map.addLayer(this.currentLayer2);\r\n      }\r\n\r\n      if (this.state.radio === \"camping\") {\r\n      }\r\n    }\r\n  }\r\n\r\n  onRadioChange = e => {\r\n    this.setState(\r\n      produce(this.state, draft => {\r\n        draft.radio = e.currentTarget.value;\r\n      })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"side\">\r\n          <h1>Regel-Maat</h1>\r\n          <img src={logo} alt=\"Natuur\" className=\"logo\" />\r\n          <div className=\"radios\">\r\n            <p>Kansen:</p>\r\n            <div className=\"radio-button\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"windmolen\"\r\n                name=\"kansen\"\r\n                value=\"windmolen\"\r\n                checked={this.state.radio === \"windmolen\"}\r\n                onChange={this.onRadioChange}\r\n              />\r\n              <label htmlFor=\"windmolen\">\r\n                Windmolen{\" \"}\r\n                <img src={windmill} alt=\"Windmolen\" className=\"icon\" />\r\n              </label>\r\n            </div>\r\n            <div className=\"radio-button\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"voedselbos\"\r\n                name=\"kansen\"\r\n                value=\"voedselbos\"\r\n                checked={this.state.radio === \"voedselbos\"}\r\n                onChange={this.onRadioChange}\r\n              />\r\n              <label htmlFor=\"voedselbos\">\r\n                Voedselbos <img src={tree} alt=\"Natuur\" className=\"icon\" />\r\n              </label>\r\n            </div>\r\n            <div className=\"radio-button\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"bijenkast\"\r\n                name=\"kansen\"\r\n                value=\"bijenkast\"\r\n                checked={this.state.radio === \"bijenkast\"}\r\n                onChange={this.onRadioChange}\r\n              />\r\n              <label htmlFor=\"bijenkast\">\r\n                Bijenkast <img src={bij} alt=\"Bijenkast\" className=\"icon\" />\r\n              </label>\r\n            </div>\r\n            <div className=\"radio-button\">\r\n              <input\r\n                type=\"radio\"\r\n                id=\"camping\"\r\n                name=\"kansen\"\r\n                value=\"camping\"\r\n                checked={this.state.radio === \"camping\"}\r\n                onChange={this.onRadioChange}\r\n              />\r\n              <label htmlFor=\"camping\">\r\n                Camping <img src={tent} alt=\"Camping\" className=\"icon\" />\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div id=\"map\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Viewer from \"./viewer/viewer\";\r\nimport { OpenLayers } from \"./open-layers/open-layers\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Switch>\r\n          {/* <Route exact path=\"/\" component={Viewer} /> */}\r\n          <Route exact path=\"/\" component={OpenLayers} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}